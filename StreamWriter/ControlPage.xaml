<Page x:Class="StreamWriter.ControlPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:i="clr-namespace:StreamWriter"
      xmlns:local="clr-namespace:StreamWriter"
      xmlns:viewModels="StreamWriter.ViewModels"
      xmlns:system="clr-namespace:System;assembly=mscorlib"
      mc:Ignorable="d"
      d:DesignHeight="333" d:DesignWidth="600"
      Title="FiberBrigg - Control"
      Style="{StaticResource WinAll}">


    <!--<Page.Resources>
        <ObjectDataProvider ObjectType="{x:Type local:ControlPage}" x:Key="UInput">
            <ObjectDataProvider.ConstructorParameters>
                <system:String>UInput</system:String>
            </ObjectDataProvider.ConstructorParameters>
        </ObjectDataProvider>
    </Page.Resources>-->

    <Grid Margin="1,0,1,1">


        <Grid.Background>
            <ImageBrush ImageSource="images/Windmill.jpg" />
        </Grid.Background>


        <!--Defining Grid layout-->
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="2.8*" />
        </Grid.ColumnDefinitions>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />

        </Grid.RowDefinitions>


        <!--Setting up the Header-->
        <Label Grid.Column="0"  Grid.Row="0" Style="{StaticResource titleTextStyle}" Grid.ColumnSpan="2" Margin="20" Content="FiberBragg Simulator v. 1.1"/>
        <Button Grid.Column="1" Width="100" Height="30" Click="Internet_MessageBox" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="10">Internet Check</Button>

        <!--Setting up frequency part-->
        <StackPanel Orientation="Horizontal" Grid.Column="1" Grid.Row="1" IsEnabled="{Binding isUIEnabled, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
            <Label Style="{StaticResource headerTextStyle}" VerticalAlignment="Center" FontFamily="Siemens Sans Black">Frequency(1-1000):</Label>
            <TextBox Grid.Column="4" Grid.Row="1" VerticalAlignment="Center" Margin="2,0,2,0"
                     KeyDown="CharValidation"  Text="{Binding frequency, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" MinWidth="80">
            </TextBox>
        </StackPanel>




        <!--The below code is for creating the channel setup this is done in its own grid to add fluidity to the rest of the layout-->
        <Grid Grid.Row="2" Grid.Column="1" Margin="0,10,10,10" IsEnabled="{Binding isUIEnabled, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" >
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />

            </Grid.RowDefinitions>

            <Label Style="{StaticResource headerTextStyle }" VerticalAlignment="Bottom">
                Sensor Setup(0-255):
            </Label>

            <UniformGrid  Columns="8" Grid.Row="1">
                <TextBox KeyDown="CharValidation" Text="{Binding tempNumPeak[0], UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="2,2,2,2"/>
                <TextBox KeyDown="CharValidation" Text="{Binding tempNumPeak[1], UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="2,2,2,2"/>
                <TextBox KeyDown="CharValidation" Text="{Binding tempNumPeak[2], UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="2,2,2,2"/>
                <TextBox KeyDown="CharValidation" Text="{Binding tempNumPeak[3], UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="2,2,2,2"/>
                <TextBox KeyDown="CharValidation" Text="{Binding tempNumPeak[4], UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="2,2,2,2"/>
                <TextBox KeyDown="CharValidation" Text="{Binding tempNumPeak[5], UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="2,2,2,2"/>
                <TextBox KeyDown="CharValidation" Text="{Binding tempNumPeak[6], UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="2,2,2,2"/>
                <TextBox KeyDown="CharValidation" Text="{Binding tempNumPeak[7], UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="2,2,2,2"/>
                <TextBox KeyDown="CharValidation" Text="{Binding tempNumPeak[8], UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="2,2,2,2"/>
                <TextBox KeyDown="CharValidation" Text="{Binding tempNumPeak[9], UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="2,2,2,2"/>
                <TextBox KeyDown="CharValidation" Text="{Binding tempNumPeak[10], UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="2,2,2,2"/>
                <TextBox KeyDown="CharValidation" Text="{Binding tempNumPeak[11], UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="2,2,2,2"/>
                <TextBox KeyDown="CharValidation" Text="{Binding tempNumPeak[12], UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="2,2,2,2"/>
                <TextBox KeyDown="CharValidation" Text="{Binding tempNumPeak[13], UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="2,2,2,2"/>
                <TextBox KeyDown="CharValidation" Text="{Binding tempNumPeak[14], UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="2,2,2,2"/>
                <TextBox KeyDown="CharValidation" Text="{Binding tempNumPeak[15], UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="2,2,2,2"/>
            </UniformGrid>
        </Grid>

        <!--Setting up the buttons-->
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Grid.Row="3" Grid.Column="1" Margin="0,0,30,0">
            <Button Click="StartButton_OnClick" Margin="2,2,2,2" MinWidth="100" x:Name="startButton" FontFamily="Siemens Slab">Start</Button>
            <Button Click="StopButton_OnClick" Margin="2,2,2,2" MinWidth="100" IsEnabled="False" x:Name="stopButton">Stop</Button>
        </StackPanel>


        <!--Manages the message box at the bottom (Creates a grid so you can split up the Borders and the ScrollView, otherwise the Scrollview inherits the dropshadow and creates a background. - Relevant for the assignment-->
        <Grid UseLayoutRounding="True" SnapsToDevicePixels="True" Grid.Column="1" HorizontalAlignment="Left" Height="50" Margin="0.4,37.4,0,-57" Grid.Row="3" VerticalAlignment="Top" Width="410" RenderTransformOrigin="0.5,0.5" >
            <Border x:Name="border"  Background="AliceBlue" CornerRadius="3" BorderBrush="#FFE7E4E4" BorderThickness="0,0,1.5,1.5"  ClipToBounds="True" >
                <Border Background="Transparent" BorderBrush="Black" BorderThickness="1.5,1.5,0,0" CornerRadius="2">

                    <Border.Effect>
                        <DropShadowEffect ShadowDepth="0" BlurRadius="10"/>
                    </Border.Effect>
                </Border>
            </Border>

            <!--ScrollViewer so it can act more like a standard terminal/Console-->
            <ScrollViewer ScrollViewer.VerticalScrollBarVisibility="Hidden" Margin="3">
                <TextBlock x:Name="outputWindowLabel" Text="{Binding outputMessage, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay }">
                    <TextBlock.Effect>
                        <DropShadowEffect ShadowDepth="0" BlurRadius="0" Color="#00CA0808" Opacity="0"/>
                    </TextBlock.Effect>
                </TextBlock>

            </ScrollViewer>
        </Grid>


        <!-- Border Code
        <Grid>
            <Border x:Name="border2"  Background="AliceBlue" CornerRadius="3" BorderBrush="#FFE7E4E4" BorderThickness="0,0,1.5,1.5"  ClipToBounds="True" >
            <Border Background="Transparent" BorderBrush="Black" BorderThickness="1.5,1.5,0,0" CornerRadius="2">

                <Border.Effect>
                    <DropShadowEffect ShadowDepth="0" BlurRadius="10"/>
                </Border.Effect>
            </Border>
            </Border>
        </Grid>
        -->


        <Canvas Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="0,50.2,5.4,-15" Grid.RowSpan="2">
            <ListBox Background="WhiteSmoke"  Padding="0,0,6,0" Canvas.Left="10" >
                <ListBox.Resources>
                    <Style TargetType="Expander">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="Expander">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <StackPanel Orientation="Horizontal">
                                            <Label Style="{StaticResource headerTextStyle}" Content="{TemplateBinding Header}"></Label>
                                            <CheckBox VerticalAlignment="Center">
                                                <CheckBox.IsChecked>

                                                    <Binding Path="errorState" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay" />

                                                </CheckBox.IsChecked>
                                            </CheckBox>
                                        </StackPanel>
                                        <ContentControl
                                        x:Name="body"
                                        Grid.Row="1" Content="{TemplateBinding Content}"
                                    />

                                    </Grid>

                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsExpanded" Value="False">
                                            <Setter TargetName="body" Property="Visibility" Value="Collapsed" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ListBox.Resources>
                <Expander x:Name="errorModeExpander" Header="Error mode" Background="White" IsEnabled="{Binding isUIEnabled, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">

                    <StackPanel Orientation="Vertical"  Margin="10,0,10,10">
                        <Label>Sensor number</Label>
                        <TextBox KeyDown="CharValidation" Text="{Binding eSensor, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />
                        <Label>Seoconds</Label>
                        <TextBox KeyDown="CharValidation" Text="{Binding eTime, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />
                    </StackPanel>
                </Expander>
            </ListBox>

        </Canvas>

    </Grid>
</Page>
